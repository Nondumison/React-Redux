// flow-typed signature: 54376398b0ac9fb0851ec272c8c874d7
// flow-typed version: <<STUB>>/@casl/ability_v^2.3.0/flow_v0.94.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   '@casl/ability'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

type RawRule = {
	subject: string | string[],
	actions: string | string[],
	fields?: string[],
	conditions?: Object,
	inverted?: boolean,
	reason?: string,
};

type Rule = {
	...RawRule,
	matches(subject: any): boolean,
	isRelevantFor: (subject: any, field?: string) => boolean,
};

type AbilityOptions = {
	subjectName: (subject: any) => string,
};

declare class Ability {
	rules: RawRule[];
	constructor(rules?: RawRule[], options?: AbilityOptions): void;
	addAlias(alias: string, fields: string | string[]): void;
	update(rules: RawRule[]): Ability;
	can(action: string, subject: any, field?: string): boolean;
	cannot(action: string, subject: any, field?: string): boolean;
	relevantRuleFor(action: string, subject: any, field?: string): Rule | null;
	possibleRulesFor(action: string, subject: any): Rule[];
	rulesFor(action: string, subject: any, field?: string): Rule[];
	throwUnlessCan(action: string, subject: any, field?: string): void;
	on(event: string, listen: Function): Function;
}

declare class RuleBuilder {
	rule: RawRule;
	because(reason: string): RuleBuilder;
}

declare class AbilityBuilderParts {
	rules: RawRule[];
	can(
		action: string | string[],
		subject: any | any[],
		conditions?: Object,
	): RuleBuilder;
	can(
		action: string | string[],
		subject: any | any[],
		fields?: string[],
		conditions?: Object,
	): RuleBuilder;
	cannot(
		action: string | string[],
		subject: any | any[],
		conditions?: Object,
	): RuleBuilder;
	cannot(
		action: string | string[],
		subject: any | any[],
		fields?: string[],
		conditions?: Object,
	): RuleBuilder;
}

declare class AbilityBuilder extends AbilityBuilderParts {
	define(params: AbilityOptions, dsl: Function): Ability;
	define(dsl: Function): Ability;
	extract(): AbilityBuilderParts;
}

declare class ForbiddenError extends Error {
	subject: any;
	subjectName: string;
	action: string;
	field: string;
}

declare module '@casl/ability' {
	declare module.exports: {|
		+AbilityBuilder: AbilityBuilder,
		+Ability: Ability,
	|};
}

declare module '@casl/ability/extra' {
	declare module.exports: {|
		+rulesToQuery: (
			ability: Ability,
			action: string,
			subject: any,
			convert: (rule: Rule) => Object,
		) => Object | null,
	|};
}
