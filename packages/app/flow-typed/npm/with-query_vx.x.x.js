// flow-typed signature: 383a0b16b4a8f3aac929358dcda03a31
// flow-typed version: <<STUB>>/with-query_v1.0.2/flow_v0.75.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'with-query'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

type qs$FilterFunction = (prefix: string, value: any) => any;
type qs$FilterArray = Array<string | number>;
type qs$Filter = qs$FilterArray | qs$FilterFunction;

type qs$ArrayFormat = 'brackets' | 'indices' | 'repeat';

type qs$ParseOptions = {
	allowPrototypes?: boolean,
	arrayLimit?: number,
	decoder?: Function,
	delimiter?: string,
	depth?: number,
	parameterLimit?: number,
	plainObjects?: boolean,
	strictNullHandling?: boolean,
	ignoreQueryPrefix?: boolean,
	parseArrays?: boolean,
	allowDots?: boolean,
};

type qs$StringifyOptions = {
	encoder?: Function,
	delimiter?: string,
	strictNullHandling?: boolean,
	skipNulls?: boolean,
	encode?: boolean,
	sort?: Function,
	allowDots?: boolean,
	serializeDate?: Function,
	encodeValuesOnly?: boolean,
	format?: string,
	addQueryPrefix?: boolean,
	arrayFormat?: qs$ArrayFormat,
	filter?: qs$Filter,
};

type withQuery$Options = {
	noHash?: boolean,
	parseOpt?: qs$ParseOptions,
	stringifyOpt?: qs$StringifyOptions,
};

type withQuery$Params = {
	[string]: ?(number | string | Object | Array<any>),
};

type withQuery$WithQuery = (
	baseUrl: string,
	params?: withQuery$Params,
	options?: withQuery$Options,
) => string;

declare module 'with-query' {
	declare module.exports: withQuery$WithQuery;
}
